{"ast":null,"code":"import { clsx } from \"clsx\";\nconst falsyToString = value => typeof value === \"boolean\" ? \"\".concat(value) : value === 0 ? \"0\" : value;\nexport const cx = clsx;\nexport const cva = (base, config) => {\n  return props => {\n    var ref;\n    if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n    const {\n      variants,\n      defaultVariants\n    } = config;\n    const getVariantClassNames = Object.keys(variants).map(variant => {\n      const variantProp = props === null || props === void 0 ? void 0 : props[variant];\n      const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];\n      if (variantProp === null) return null;\n      const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);\n      return variants[variant][variantKey];\n    });\n    const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param) => {\n      let [key, value] = param;\n      if (value === undefined) {\n        return acc;\n      }\n      acc[key] = value;\n      return acc;\n    }, {});\n    const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (ref = config.compoundVariants) === null || ref === void 0 ? void 0 : ref.reduce((acc, param1) => {\n      let {\n        class: cvClass,\n        className: cvClassName,\n        ...compoundVariantOptions\n      } = param1;\n      return Object.entries(compoundVariantOptions).every(param => {\n        let [key, value] = param;\n        return Array.isArray(value) ? value.includes({\n          ...defaultVariants,\n          ...propsWithoutUndefined\n        }[key]) : {\n          ...defaultVariants,\n          ...propsWithoutUndefined\n        }[key] === value;\n      }) ? [...acc, cvClass, cvClassName] : acc;\n    }, []);\n    return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n  };\n};","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { clsx } from \"clsx\";\nconst falsyToString = (value)=>typeof value === \"boolean\" ? \"\".concat(value) : value === 0 ? \"0\" : value;\nexport const cx = clsx;\nexport const cva = (base, config)=>{\n    return (props)=>{\n        var ref;\n        if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n        const { variants , defaultVariants  } = config;\n        const getVariantClassNames = Object.keys(variants).map((variant)=>{\n            const variantProp = props === null || props === void 0 ? void 0 : props[variant];\n            const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];\n            if (variantProp === null) return null;\n            const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);\n            return variants[variant][variantKey];\n        });\n        const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param)=>{\n            let [key, value] = param;\n            if (value === undefined) {\n                return acc;\n            }\n            acc[key] = value;\n            return acc;\n        }, {});\n        const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (ref = config.compoundVariants) === null || ref === void 0 ? void 0 : ref.reduce((acc, param1)=>{\n            let { class: cvClass , className: cvClassName , ...compoundVariantOptions } = param1;\n            return Object.entries(compoundVariantOptions).every((param)=>{\n                let [key, value] = param;\n                return Array.isArray(value) ? value.includes({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                }[key]) : ({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                })[key] === value;\n            }) ? [\n                ...acc,\n                cvClass,\n                cvClassName\n            ] : acc;\n        }, []);\n        return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n    };\n};\n\n\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var $dJwbH$react = require(\"react\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"composeRefs\", () => $9c2aaba23466b352$export$43e446d32b3d21af);\n$parcel$export(module.exports, \"useComposedRefs\", () => $9c2aaba23466b352$export$c7b2cbe3552a0d05);\n\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */\nfunction $9c2aaba23466b352$var$setRef(ref, value) {\n  if (typeof ref === 'function') ref(value);else if (ref !== null && ref !== undefined) ref.current = value;\n}\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */\nfunction $9c2aaba23466b352$export$43e446d32b3d21af(...refs) {\n  return node => refs.forEach(ref => $9c2aaba23466b352$var$setRef(ref, node));\n}\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */\nfunction $9c2aaba23466b352$export$c7b2cbe3552a0d05(...refs) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return $dJwbH$react.useCallback($9c2aaba23466b352$export$43e446d32b3d21af(...refs), refs);\n}","map":{"version":3,"sources":["packages/react/compose-refs/src/composeRefs.tsx"],"names":["setRef","ref","value","undefined","current","composeRefs","refs","node","forEach","useComposedRefs","React"],"mappings":";;;;;;;;;;;;AAIA;;;AAGA;AACA,SAASA,4BAAT,CAAmBC,GAAnB,EAAwCC,KAAxC,EAAkD;EAChD,IAAI,OAAOD,GAAP,KAAe,UAAnB,EACEA,GAAG,CAACC,KAAD,CAAHD,CAAAA,KACK,IAAIA,GAAG,KAAK,IAARA,IAAgBA,GAAG,KAAKE,SAA5B,EACJF,GAAD,CAAmCG,OAAnC,GAA6CF,KAA7C;AAEH;AAED;;;AAGA;AACA,SAASG,yCAAT,CAAwB,GAAGC,IAA3B,EAAmD;EACjD,OAAQC,IAAD,IAAa,IAAI,CAACC,OAAL,CAAcP,GAAD,IAASD,4BAAM,CAACC,GAAD,EAAMM,IAAlC,CAAA,CAApB;AACD;AAED;;;AAGA;AACA,SAASE,yCAAT,CAA4B,GAAGH,IAA/B,EAAuD;EACrD;EACA,OAAOI,YAAAA,CAAAA,WAAAA,CAAkBL,yCAAW,CAAA,GAAIC,IAAJ,CAA7BI,EAAwCJ,IAAxCI,CAAP;AACD","sourcesContent":["import * as React from 'react';\n\ntype PossibleRef<T> = React.Ref<T> | undefined;\n\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */\nfunction setRef<T>(ref: PossibleRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref !== null && ref !== undefined) {\n    (ref as React.MutableRefObject<T>).current = value;\n  }\n}\n\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */\nfunction composeRefs<T>(...refs: PossibleRef<T>[]) {\n  return (node: T) => refs.forEach((ref) => setRef(ref, node));\n}\n\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */\nfunction useComposedRefs<T>(...refs: PossibleRef<T>[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(composeRefs(...refs), refs);\n}\n\nexport { composeRefs, useComposedRefs };\n"]},"metadata":{},"sourceType":"script"}
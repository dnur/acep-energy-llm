{"ast":null,"code":"import $9IrjX$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport { forwardRef as $9IrjX$forwardRef, Children as $9IrjX$Children, isValidElement as $9IrjX$isValidElement, createElement as $9IrjX$createElement, cloneElement as $9IrjX$cloneElement, Fragment as $9IrjX$Fragment } from \"react\";\nimport { composeRefs as $9IrjX$composeRefs } from \"@radix-ui/react-compose-refs\";\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\nconst $5e63c961fc1ce211$export$8c6ed5c666ac1360 = /*#__PURE__*/$9IrjX$forwardRef((props, forwardedRef) => {\n  const {\n    children: children,\n    ...slotProps\n  } = props;\n  const childrenArray = $9IrjX$Children.toArray(children);\n  const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable);\n  if (slottable) {\n    // the new element to render is the one passed as a child of `Slottable`\n    const newElement = slottable.props.children;\n    const newChildren = childrenArray.map(child => {\n      if (child === slottable) {\n        // because the new element will be the one rendered, we are only interested\n        // in grabbing its children (`newElement.props.children`)\n        if ($9IrjX$Children.count(newElement) > 1) return $9IrjX$Children.only(null);\n        return /*#__PURE__*/$9IrjX$isValidElement(newElement) ? newElement.props.children : null;\n      } else return child;\n    });\n    return /*#__PURE__*/$9IrjX$createElement($5e63c961fc1ce211$var$SlotClone, $9IrjX$babelruntimehelpersesmextends({}, slotProps, {\n      ref: forwardedRef\n    }), /*#__PURE__*/$9IrjX$isValidElement(newElement) ? /*#__PURE__*/$9IrjX$cloneElement(newElement, undefined, newChildren) : null);\n  }\n  return /*#__PURE__*/$9IrjX$createElement($5e63c961fc1ce211$var$SlotClone, $9IrjX$babelruntimehelpersesmextends({}, slotProps, {\n    ref: forwardedRef\n  }), children);\n});\n$5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = 'Slot';\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\nconst $5e63c961fc1ce211$var$SlotClone = /*#__PURE__*/$9IrjX$forwardRef((props, forwardedRef) => {\n  const {\n    children: children,\n    ...slotProps\n  } = props;\n  if ( /*#__PURE__*/$9IrjX$isValidElement(children)) return /*#__PURE__*/$9IrjX$cloneElement(children, {\n    ...$5e63c961fc1ce211$var$mergeProps(slotProps, children.props),\n    ref: forwardedRef ? $9IrjX$composeRefs(forwardedRef, children.ref) : children.ref\n  });\n  return $9IrjX$Children.count(children) > 1 ? $9IrjX$Children.only(null) : null;\n});\n$5e63c961fc1ce211$var$SlotClone.displayName = 'SlotClone';\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\nconst $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({\n  children: children\n}) => {\n  return /*#__PURE__*/$9IrjX$createElement($9IrjX$Fragment, null, children);\n};\n/* ---------------------------------------------------------------------------------------------- */\nfunction $5e63c961fc1ce211$var$isSlottable(child) {\n  return /*#__PURE__*/$9IrjX$isValidElement(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;\n}\nfunction $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {\n  // all child props should override\n  const overrideProps = {\n    ...childProps\n  };\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n    const isHandler = /^on[A-Z]/.test(propName);\n    if (isHandler) {\n      // if the handler exists on both, we compose them\n      if (slotPropValue && childPropValue) overrideProps[propName] = (...args) => {\n        childPropValue(...args);\n        slotPropValue(...args);\n      };else if (slotPropValue) overrideProps[propName] = slotPropValue;\n    } else if (propName === 'style') overrideProps[propName] = {\n      ...slotPropValue,\n      ...childPropValue\n    };else if (propName === 'className') overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(' ');\n  }\n  return {\n    ...slotProps,\n    ...overrideProps\n  };\n}\nconst $5e63c961fc1ce211$export$be92b6f5f03c0fe9 = $5e63c961fc1ce211$export$8c6ed5c666ac1360;\nexport { $5e63c961fc1ce211$export$8c6ed5c666ac1360 as Slot, $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 as Slottable, $5e63c961fc1ce211$export$be92b6f5f03c0fe9 as Root };","map":{"version":3,"sources":["packages/react/slot/src/Slot.tsx"],"names":["Slot","props","forwardedRef","children","childrenArray","React","toArray","slottable","find","isSlottable","newElement","newChildren","map","child","count","only","slotProps","undefined","displayName","SlotClone","mergeProps","ref","composeRefs","Slottable","type","childProps","overrideProps","propName","slotPropValue","childPropValue","isHandler","test","args","filter","Boolean","join","Root"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotProps extends React.HTMLAttributes<HTMLElement> {\n  children?: React.ReactNode;\n}\n\nconst Slot = React.forwardRef<HTMLElement, SlotProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n  const childrenArray = React.Children.toArray(children);\n  const slottable = childrenArray.find(isSlottable);\n\n  if (slottable) {\n    // the new element to render is the one passed as a child of `Slottable`\n    const newElement = slottable.props.children as React.ReactNode;\n\n    const newChildren = childrenArray.map((child) => {\n      if (child === slottable) {\n        // because the new element will be the one rendered, we are only interested\n        // in grabbing its children (`newElement.props.children`)\n        if (React.Children.count(newElement) > 1) return React.Children.only(null);\n        return React.isValidElement(newElement)\n          ? (newElement.props.children as React.ReactNode)\n          : null;\n      } else {\n        return child;\n      }\n    });\n\n    return (\n      <SlotClone {...slotProps} ref={forwardedRef}>\n        {React.isValidElement(newElement)\n          ? React.cloneElement(newElement, undefined, newChildren)\n          : null}\n      </SlotClone>\n    );\n  }\n\n  return (\n    <SlotClone {...slotProps} ref={forwardedRef}>\n      {children}\n    </SlotClone>\n  );\n});\n\nSlot.displayName = 'Slot';\n\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotCloneProps {\n  children: React.ReactNode;\n}\n\nconst SlotClone = React.forwardRef<any, SlotCloneProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...mergeProps(slotProps, children.props),\n      ref: forwardedRef ? composeRefs(forwardedRef, (children as any).ref) : (children as any).ref,\n    });\n  }\n\n  return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n});\n\nSlotClone.displayName = 'SlotClone';\n\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nconst Slottable = ({ children }: { children: React.ReactNode }) => {\n  return <>{children}</>;\n};\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype AnyProps = Record<string, any>;\n\nfunction isSlottable(child: React.ReactNode): child is React.ReactElement {\n  return React.isValidElement(child) && child.type === Slottable;\n}\n\nfunction mergeProps(slotProps: AnyProps, childProps: AnyProps) {\n  // all child props should override\n  const overrideProps = { ...childProps };\n\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n\n    const isHandler = /^on[A-Z]/.test(propName);\n    if (isHandler) {\n      // if the handler exists on both, we compose them\n      if (slotPropValue && childPropValue) {\n        overrideProps[propName] = (...args: unknown[]) => {\n          childPropValue(...args);\n          slotPropValue(...args);\n        };\n      }\n      // but if it exists only on the slot, we use only this one\n      else if (slotPropValue) {\n        overrideProps[propName] = slotPropValue;\n      }\n    }\n    // if it's `style`, we merge them\n    else if (propName === 'style') {\n      overrideProps[propName] = { ...slotPropValue, ...childPropValue };\n    } else if (propName === 'className') {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(' ');\n    }\n  }\n\n  return { ...slotProps, ...overrideProps };\n}\n\nconst Root = Slot;\n\nexport {\n  Slot,\n  Slottable,\n  //\n  Root,\n};\nexport type { SlotProps };\n"]},"metadata":{},"sourceType":"module"}